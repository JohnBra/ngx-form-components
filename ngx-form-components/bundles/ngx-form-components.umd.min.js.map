{"version":3,"sources":["ng://ngx-form-components/lib/ngx-form-components.service.ts","ng://ngx-form-components/lib/ngx-form-components.component.ts","ng://ngx-form-components/lib/range-input/range-input.component.ts","ng://ngx-form-components/lib/ngx-form-components.module.ts"],"names":["NgxFormComponentsService","Injectable","args","providedIn","NgxFormComponentsComponent","prototype","ngOnInit","Component","selector","template","noop","RangeInputComponent","elementRef","renderer","iterableDiffers","this","min","max","step","toolTips","minRangeSlider","rangeChange","EventEmitter","onTouchedCallback","onChangeCallback","combineToolTip","iterableDiffer","find","create","ngDoCheck","diff","range","emit","setDefaultRange","setDimensions","setCustomCss","isNaN","defaultRange","Array","isArray","length","some","console","error","Math","round","addClass","minSliderButton","nativeElement","sliderButtonCssClass","setSliderCss","barCssClass","setBarCss","highlightBarCssClass","setBarHighlightCss","customCssClass","removeClass","bar","barHighlight","maxSliderButton","minTouched","event","evt","changedTouches","minMouseDown","maxTouched","maxMouseDown","minSliderClicked","minSelected","maxSliderClicked","maxSelected","minSliderInitialLeft","target","offsetLeft","initialMinMouseX","clientX","maxSliderInitialLeft","initialMaxMouseX","touchMove","mouseMove","onResize","minChange","left","value","pixToVal","minSliderLeft","finalVal","calculateDistance","valToPixel","maxChange","maxSliderLeft","rangeInPixels","final","setHighlightBarDimensions","setTooltipDimensions","mouseUp","remainder","floor","ceil","undefined","setBarAndSliderDimensions","sliderWidth","offsetWidth","sliderHeight","offsetHeight","barWidth","rangeDiff","valToPixelFactor","highlightBarLeft","highlightBarWidth","toolTipTop","minToolTipWidth","getToolTipLength","toString","combineToolTipWidth","maxLeft","combineToolTipLeft","num","String","match","Number","toFixed","ElementRef","Renderer2","IterableDiffers","Input","Output","ViewChild","HostListener","NgxFormComponentsModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxFormComponentsService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'nfc-ngx-form-components',\n  template: `\n    <p>\n      ngx-form-components works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxFormComponentsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {\r\n  Component, DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  IterableDiffers,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild\r\n} from '@angular/core';\r\n\r\nconst noop = () => {};\r\n\r\n@Component({\r\n  selector: 'nfc-range-input',\r\n  templateUrl: './range-input.component.html',\r\n  styleUrls: ['./range-input.component.css']\r\n})\r\nexport class RangeInputComponent implements OnInit, DoCheck {\r\n\r\n  @Input() min?: number = 0;\r\n  @Input() max?: number = 100;\r\n  @Input() step?: number = 1;\r\n  @Input() toolTips?: boolean = false;\r\n  @Input() minRangeSlider?: boolean = false;\r\n  @Input() defaultRange?: any;\r\n  @Input() highlightBarCssClass?: string;\r\n  @Input() barCssClass?: string;\r\n  @Input() sliderButtonCssClass?: string;\r\n\r\n  @Output() rangeChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @ViewChild('bar') bar: ElementRef;\r\n  @ViewChild('minSliderButton') minSliderButton: ElementRef;\r\n  @ViewChild('maxSliderButton') maxSliderButton: ElementRef;\r\n  @ViewChild('barHighlight') barHighlight: ElementRef;\r\n\r\n  private valToPixelFactor: number;\r\n  private iterableDiffer: any;\r\n  private onTouchedCallback: (_: any) => void = noop;\r\n  private onChangeCallback: (_: any) => void = noop;\r\n\r\n  // dimensional variables\r\n  minSliderLeft: number;\r\n  maxSliderLeft: number;\r\n  sliderWidth: number;\r\n  sliderHeight: number;\r\n  barWidth: number;\r\n  highlightBarWidth: number;\r\n  highlightBarLeft: number;\r\n\r\n  // calculation and event variables\r\n  range: number[];\r\n  rangeDiff: number;\r\n  minSliderClicked: boolean;\r\n  minSelected: boolean;\r\n  maxSliderClicked: boolean;\r\n  maxSelected: boolean;\r\n  minSliderInitialLeft: number;\r\n  initialMinMouseX: number;\r\n  maxSliderInitialLeft: number;\r\n  initialMaxMouseX: number;\r\n  rangeInPixels: number;\r\n  minChange: number;\r\n  maxChange: number;\r\n\r\n  // tooltip variables\r\n  combineToolTip: boolean = false;\r\n  combineToolTipLeft: number;\r\n  minToolTipWidth: number;\r\n  combineToolTipWidth: number;\r\n  toolTipTop: number;\r\n\r\n  constructor(private elementRef: ElementRef,\r\n              private renderer: Renderer2,\r\n              private iterableDiffers: IterableDiffers) {\r\n\r\n    this.iterableDiffer = this.iterableDiffers.find([]).create(null);\r\n  }\r\n\r\n  ngDoCheck() {\r\n    const changes = this.iterableDiffer.diff(this.range);\r\n    if (changes) {\r\n      this.onChangeCallback(this.range);\r\n      this.onTouchedCallback(this.range);\r\n\r\n      // only emit array when min range slider is active, else emit number\r\n      if (this.minRangeSlider) {\r\n        this.rangeChange.emit(this.range);\r\n      } else {\r\n        this.rangeChange.emit(this.range[1]);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // sets range default value and removes the min slider button if disabled\r\n    this.setDefaultRange();\r\n    // sets all related dimensions (slider bar, -highlighter bar, -buttons and -tooltips)\r\n    this.setDimensions();\r\n    this.setCustomCss();\r\n  }\r\n\r\n  setDefaultRange() {\r\n    // init range variable\r\n    if (!isNaN(this.defaultRange)) {\r\n      this.range = [this.min, this.defaultRange];\r\n    } else if (Array.isArray(this.defaultRange) && this.defaultRange.length === 2 && !this.defaultRange.some(isNaN)) {\r\n      // check if default values are compliant with min and max values\r\n      if (this.defaultRange[0] >= this.min && this.defaultRange[1] <= this.max) {\r\n        // set default values to passed array if minRangeSlider is on\r\n        if (this.minRangeSlider) {\r\n          this.range = this.defaultRange;\r\n        } else {\r\n          // set default value to min if minRangeSlider is off\r\n          this.range = [this.min, this.defaultRange[1]];\r\n        }\r\n      } else {\r\n        // fallback if default values are not compliant with min and max values\r\n        console.error(`default range is not compliant with min and max values ... set fallback values`);\r\n        this.range = [this.min, Math.round(this.max / 2)];\r\n      }\r\n    } else {\r\n      // fallback if array has anything else than 2 slots, anything but numbers or is not array\r\n      this.range = [this.min, Math.round(this.max / 2)];\r\n    }\r\n    // init min range, when it's only one slider\r\n    if (!this.minRangeSlider) {\r\n      this.renderer.addClass(this.minSliderButton.nativeElement, 'nfc-range-input__slider-button--hidden');\r\n    }\r\n  }\r\n\r\n  setCustomCss() {\r\n    if (this.sliderButtonCssClass) {\r\n      this.setSliderCss(this.sliderButtonCssClass);\r\n    }\r\n\r\n    if (this.barCssClass) {\r\n      this.setBarCss(this.barCssClass);\r\n    }\r\n\r\n    if (this.highlightBarCssClass) {\r\n      this.setBarHighlightCss(this.highlightBarCssClass);\r\n    }\r\n  }\r\n\r\n  setBarCss(customCssClass: string) {\r\n    this.renderer.removeClass(this.bar.nativeElement, 'nfc-range-input__bar-styling');\r\n    this.renderer.addClass(this.bar.nativeElement, customCssClass);\r\n  }\r\n\r\n  setBarHighlightCss(customCssClass: string) {\r\n    this.renderer.removeClass(this.barHighlight.nativeElement, 'nfc-range-input__bar-highlight-styling');\r\n    this.renderer.addClass(this.barHighlight.nativeElement, customCssClass);\r\n  }\r\n\r\n  setSliderCss(customCssClass: string) {\r\n    if (this.minSliderButton) {\r\n      this.renderer.removeClass(this.minSliderButton.nativeElement, 'nfc-range-input__slider-button-styling');\r\n      this.renderer.addClass(this.minSliderButton.nativeElement, customCssClass);\r\n    }\r\n\r\n    if (this.minSliderButton) {\r\n      this.renderer.removeClass(this.maxSliderButton.nativeElement, 'nfc-range-input__slider-button-styling');\r\n      this.renderer.addClass(this.maxSliderButton.nativeElement, customCssClass);\r\n    }\r\n  }\r\n\r\n  minTouched(event: any) {\r\n    const evt = event.changedTouches[0];\r\n    this.minMouseDown(evt);\r\n  }\r\n\r\n  maxTouched(event: any) {\r\n    const evt = event.changedTouches[0];\r\n    this.maxMouseDown(evt);\r\n  }\r\n\r\n  minMouseDown(event: any) {\r\n    this.minSliderClicked = true;\r\n    this.minSelected = true;\r\n    this.maxSliderClicked = false;\r\n    this.maxSelected = false;\r\n    this.minSliderInitialLeft = event.target.offsetLeft;\r\n    this.initialMinMouseX = event.clientX;\r\n  }\r\n\r\n  maxMouseDown(event: any) {\r\n    this.maxSliderClicked = true;\r\n    this.maxSelected = true;\r\n    this.minSliderClicked = false;\r\n    this.minSelected = false;\r\n    this.maxSliderInitialLeft = event.target.offsetLeft;\r\n    this.initialMaxMouseX = event.clientX;\r\n  }\r\n\r\n  touchMove(event: any) {\r\n    const evt = event.changedTouches[0];\r\n    this.mouseMove(evt);\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event: any) {\r\n    if (this.range) {\r\n      this.setDimensions();\r\n    }\r\n  }\r\n\r\n  @HostListener('window:mousemove', ['$event'])\r\n  mouseMove(event: any) {\r\n    if (this.minSelected || this.maxSelected) {\r\n      if (this.minSelected) {\r\n        this.minChange = event.clientX - this.initialMinMouseX;\r\n        const left = this.minSliderInitialLeft + this.minChange;\r\n        const value = this.pixToVal(this.min, left);\r\n\r\n        if (value <= this.range[1]) {\r\n          if (value <= this.min) {\r\n            this.minSliderLeft = 0;\r\n            this.range[0] = this.min;\r\n          } else {\r\n            const finalVal = this.calculateDistance(value);\r\n            this.range[0] = finalVal <= this.range[1] ? finalVal : this.range[1];\r\n            this.minSliderLeft = this.valToPixel(this.range[0]);\r\n          }\r\n        }\r\n      } else if (this.maxSelected) {\r\n        this.maxChange = event.clientX - this.initialMaxMouseX;\r\n        const left = this.maxSliderInitialLeft + this.maxChange;\r\n        const value = this.pixToVal(this.min, left);\r\n        if (value >= this.range[0]) {\r\n          if (value >= this.max) {\r\n            this.maxSliderLeft = this.rangeInPixels;\r\n            this.range[1] = this.max;\r\n          } else {\r\n            const final = this.calculateDistance(value);\r\n            this.range[1] = final > this.range[0] ? final <= this.max ? final : this.max : this.range[0];\r\n            this.maxSliderLeft = this.valToPixel(this.range[1]);\r\n          }\r\n        }\r\n      }\r\n      this.setHighlightBarDimensions();\r\n      this.setTooltipDimensions();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  @HostListener('window:mouseup', ['$event'])\r\n  mouseUp(event: any) {\r\n    this.minSelected = false;\r\n    this.maxSelected = false;\r\n  }\r\n\r\n  calculateDistance(value: number): number {\r\n    if (this.step) {\r\n      const fin = value - Math.floor(value);\r\n      if (fin >= 0.5) {\r\n        value = Math.ceil(value);\r\n      } else {\r\n        value = Math.floor(value);\r\n      }\r\n      const remainder = value % this.step;\r\n      if (remainder === 0) {\r\n        return value;\r\n      } else {\r\n        if (remainder >= (this.step / 2)) {\r\n          value = value + (this.step - remainder);\r\n        } else {\r\n          value = value - remainder;\r\n        }\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n\r\n  setDimensions() {\r\n    if (this.bar && this.maxSliderButton && this.range && this.range[0] !== undefined) {\r\n      this.setBarAndSliderDimensions();\r\n      this.setHighlightBarDimensions();\r\n      this.setTooltipDimensions();\r\n    }\r\n  }\r\n\r\n  setBarAndSliderDimensions() {\r\n    this.sliderWidth = this.maxSliderButton.nativeElement.offsetWidth;\r\n    this.sliderHeight = this.maxSliderButton.nativeElement.offsetHeight;\r\n    this.barWidth = this.bar.nativeElement.offsetWidth;\r\n    if (this.sliderWidth && this.barWidth) {\r\n      this.rangeDiff = this.max - this.min;\r\n      this.rangeInPixels = this.barWidth - this.sliderWidth;\r\n      if (this.barWidth && this.sliderWidth) {\r\n        this.valToPixelFactor = ((this.rangeInPixels) / this.rangeDiff);\r\n      }\r\n      this.minSliderLeft = (this.range[0] - this.min) * this.valToPixelFactor;\r\n      this.maxSliderLeft = (this.range[1] - this.min) * this.valToPixelFactor;\r\n    }\r\n  }\r\n\r\n  setHighlightBarDimensions() {\r\n    if (this.minRangeSlider) {\r\n      this.highlightBarLeft = this.minSliderLeft + (this.sliderWidth / 2);\r\n    } else {\r\n      this.highlightBarLeft = this.minSliderLeft;\r\n    }\r\n    this.highlightBarWidth = this.maxSliderLeft - this.minSliderLeft;\r\n  }\r\n\r\n  setTooltipDimensions() {\r\n    this.toolTipTop = (this.sliderHeight + 10) * - 1;\r\n    this.minToolTipWidth = this.getToolTipLength(this.range[0].toString());\r\n    const cond = this.minToolTipWidth * 8 + this.minSliderLeft + 8;\r\n    if (cond > this.maxSliderLeft && this.toolTips && this.minRangeSlider) {\r\n      this.combineToolTip = true;\r\n      this.combineToolTipWidth = this.getToolTipLength(`${this.range[0]}-${this.range[1]}`) * 8;\r\n      const maxLeft = this.rangeInPixels - this.combineToolTipWidth;\r\n      this.combineToolTipLeft = this.minSliderLeft < maxLeft ? this.minSliderLeft : maxLeft;\r\n    } else {\r\n      this.combineToolTip = false;\r\n    }\r\n  }\r\n\r\n  getToolTipLength(num) {\r\n    return  String(num).match(/\\d/g).length;\r\n  }\r\n\r\n  pixToVal(min: number, left: number): number {\r\n    return Number((min + left * (1 / this.valToPixelFactor)).toFixed(2));\r\n  }\r\n\r\n  valToPixel(value: number): number {\r\n    return this.valToPixelFactor * (value - this.min);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { NgxFormComponentsComponent } from './ngx-form-components.component';\nimport { RangeInputComponent } from './range-input/range-input.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    NgxFormComponentsComponent,\n    RangeInputComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    NgxFormComponentsComponent,\n    RangeInputComponent\n  ]\n})\nexport class NgxFormComponentsModule { }\n"]}