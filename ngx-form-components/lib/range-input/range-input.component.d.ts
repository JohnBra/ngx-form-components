import { DoCheck, ElementRef, EventEmitter, IterableDiffers, OnInit, Renderer2 } from '@angular/core';
export declare class RangeInputComponent implements OnInit, DoCheck {
    private elementRef;
    private renderer;
    private iterableDiffers;
    min?: number;
    max?: number;
    step?: number;
    toolTips?: boolean;
    minRangeSlider?: boolean;
    defaultRange?: any;
    highlightBarCssClass?: string;
    barCssClass?: string;
    sliderButtonCssClass?: string;
    rangeChange: EventEmitter<any>;
    bar: ElementRef;
    minSliderButton: ElementRef;
    maxSliderButton: ElementRef;
    barHighlight: ElementRef;
    private valToPixelFactor;
    private iterableDiffer;
    private onTouchedCallback;
    private onChangeCallback;
    minSliderLeft: number;
    maxSliderLeft: number;
    sliderWidth: number;
    sliderHeight: number;
    barWidth: number;
    highlightBarWidth: number;
    highlightBarLeft: number;
    range: number[];
    rangeDiff: number;
    minSliderClicked: boolean;
    minSelected: boolean;
    maxSliderClicked: boolean;
    maxSelected: boolean;
    minSliderInitialLeft: number;
    initialMinMouseX: number;
    maxSliderInitialLeft: number;
    initialMaxMouseX: number;
    rangeInPixels: number;
    minChange: number;
    maxChange: number;
    combineToolTip: boolean;
    combineToolTipLeft: number;
    minToolTipWidth: number;
    combineToolTipWidth: number;
    toolTipTop: number;
    constructor(elementRef: ElementRef, renderer: Renderer2, iterableDiffers: IterableDiffers);
    ngDoCheck(): void;
    ngOnInit(): void;
    setDefaultRange(): void;
    setCustomCss(): void;
    setBarCss(customCssClass: string): void;
    setBarHighlightCss(customCssClass: string): void;
    setSliderCss(customCssClass: string): void;
    minTouched(event: any): void;
    maxTouched(event: any): void;
    minMouseDown(event: any): void;
    maxMouseDown(event: any): void;
    touchMove(event: any): void;
    onResize(event: any): void;
    mouseMove(event: any): boolean;
    mouseUp(event: any): void;
    calculateDistance(value: number): number;
    setDimensions(): void;
    setBarAndSliderDimensions(): void;
    setHighlightBarDimensions(): void;
    setTooltipDimensions(): void;
    getToolTipLength(num: any): number;
    pixToVal(min: number, left: number): number;
    valToPixel(value: number): number;
}
